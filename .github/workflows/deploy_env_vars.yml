name: Deploy Environment Variables
description: Deploy environment variables for Django application to the server.

on:
  workflow_dispatch:
    inputs:
      environment_name:
        description: 'Environment'
        required: true
        type: choice
        options:
          - staging
          - production

jobs:

  deploy-django-env:

    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate dfb-django.env
        uses: cuchi/jinja2-action@v1.3.0
        with:
          template: container_infra/env_templates/dfb-django.env.j2
          output_file: dfb-django.env
        env:
          DJANGO_ENV: ${{ inputs.environment_name }}
          DJANGO_PORT: ${{ vars.DJANGO_PORT }}
          DJANGO_DEBUG: ${{ vars.DJANGO_DEBUG }}
          DJANGO_CSRF_TRUSTED_ORIGINS: ${{ vars.DJANGO_CSRF_TRUSTED_ORIGINS }}
          DJANGO_ALLOWED_HOSTS: ${{ vars.DJANGO_ALLOWED_HOSTS }}
          DJANGO_SETTINGS_MODULE: ${{ vars.DJANGO_SETTINGS_MODULE }}
          DJANGO_LOG_LEVEL: ${{ vars.DJANGO_LOG_LEVEL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_DB_URL: ${{ secrets.DJANGO_DB_URL }}
          DJANGO_ADMIN_PASSWORD: ${{ secrets.DJANGO_ADMIN_PASSWORD }}
          DJANGO_EMAIL_HOST: ${{ vars.DJANGO_EMAIL_HOST }}
          DJANGO_EMAIL_PORT: ${{ vars.DJANGO_EMAIL_PORT }}
          DJANGO_EMAIL_HOST_USER: ${{ vars.DJANGO_EMAIL_HOST_USER }}
          DJANGO_EMAIL_HOST_PASSWORD: ${{ secrets.DJANGO_EMAIL_HOST_PASSWORD }}
          DJANGO_EMAIL_USE_SSL: ${{ vars.DJANGO_EMAIL_USE_SSL }}
          DJANGO_COMMENT_EMAIL_RECIPIENTS: ${{ vars.DJANGO_COMMENT_EMAIL_RECIPIENTS }}
          DJANGO_COMMENT_EMAIL_FROM: ${{ vars.DJANGO_COMMENT_EMAIL_FROM }}
          DJANGO_CELERY_BROKER_URL: ${{ secrets.DJANGO_CELERY_BROKER_URL }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
          echo "${{ secrets.SSH_KEY }}" >> ~/.ssh/deploy.key
          chmod 0600 ~/.ssh/deploy.key
          ssh-keyscan ${{ vars.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy environment to server
        run: |
          eval $(ssh-agent -s) && ssh-add ~/.ssh/deploy.key
          scp -P ${{ vars.SSH_PORT }} dfb-django.env ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:/home/${{ vars.SSH_USER }}/dfb-django-${{ inputs.environment_name }}.env
          ssh -p ${{ vars.SSH_PORT }} ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} <<EOF
            sudo mkdir /secrets
            sudo mv /home/${{ vars.SSH_USER }}/dfb-django-${{ inputs.environment_name }}.env /secrets/dfb-django-${{ inputs.environment_name }}.env
          EOF

  deploy-nginx-env:

    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate dfb-nginx.env
        uses: cuchi/jinja2-action@v1.3.0
        with:
          template: container_infra/env_templates/dfb-nginx.env.j2
          output_file: dfb-nginx.env
        env:
          CERTBOT_EMAIL: ${{ vars.NGINX_CERTBOT_EMAIL }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
          echo "${{ secrets.SSH_KEY }}" >> ~/.ssh/deploy.key
          chmod 0600 ~/.ssh/deploy.key
          ssh-keyscan ${{ vars.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy environment to server
        run: |
          eval $(ssh-agent -s) && ssh-add ~/.ssh/deploy.key
          scp -P ${{ vars.SSH_PORT }} dfb-nginx.env ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:/home/${{ vars.SSH_USER }}/dfb-nginx-${{ inputs.environment_name }}.env
          ssh -p ${{ vars.SSH_PORT }} ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} <<EOF
            sudo mkdir /secrets
            sudo mv /home/${{ vars.SSH_USER }}/dfb-nginx-${{ inputs.environment_name }}.env /secrets/dfb-nginx-${{ inputs.environment_name }}.env
          EOF

  deploy-postgres-env:

    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate dfb-postgres.env
        uses: cuchi/jinja2-action@v1.3.0
        with:
          template: container_infra/env_templates/dfb-postgres.env.j2
          output_file: dfb-postgres.env
        env:
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
          echo "${{ secrets.SSH_KEY }}" >> ~/.ssh/deploy.key
          chmod 0600 ~/.ssh/deploy.key
          ssh-keyscan ${{ vars.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy environment to server
        run: |
          eval $(ssh-agent -s) && ssh-add ~/.ssh/deploy.key
          scp -P ${{ vars.SSH_PORT }} dfb-postgres.env ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:/home/${{ vars.SSH_USER }}/dfb-postgres-${{ inputs.environment_name }}.env
          ssh -p ${{ vars.SSH_PORT }} ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} <<EOF
            sudo mkdir /secrets
            sudo mv /home/${{ vars.SSH_USER }}/dfb-postgres-${{ inputs.environment_name }}.env /secrets/dfb-postgres-${{ inputs.environment_name }}.env
          EOF


  deploy-rabbitmq-env:

    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate dfb-postgres.env
        uses: cuchi/jinja2-action@v1.3.0
        with:
          template: container_infra/env_templates/dfb-rabbitmq.env.j2
          output_file: dfb-rabbitmq.env
        env:
          RABBITMQ_DEFAULT_USER: ${{ vars.RABBITMQ_DEFAULT_USER }}
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_DEFAULT_PASS }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
          echo "${{ secrets.SSH_KEY }}" >> ~/.ssh/deploy.key
          chmod 0600 ~/.ssh/deploy.key
          ssh-keyscan ${{ vars.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy environment to server
        run: |
          eval $(ssh-agent -s) && ssh-add ~/.ssh/deploy.key
          scp -P ${{ vars.SSH_PORT }} dfb-rabbitmq.env ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:/home/${{ vars.SSH_USER }}/dfb-rabbitmq-${{ inputs.environment_name }}.env
          ssh -p ${{ vars.SSH_PORT }} ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} <<EOF
            sudo mkdir /secrets
            sudo mv /home/${{ vars.SSH_USER }}/dfb-rabbitmq-${{ inputs.environment_name }}.env /secrets/dfb-rabbitmq-${{ inputs.environment_name }}.env
          EOF
