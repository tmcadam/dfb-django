name: Build, Test and Deploy

on:
  push:
    branches:
      - development
  workflow_dispatch:


jobs:

  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run tests on the image
        run: |
          docker compose -f docker-compose-test.yml run --rm dfb-test


  build-push:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      packages: write


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: echo branch name
        run: |
          echo ${{ github.head_ref || github.ref_name }}
          echo ${{ github.event.repository.name }}
          echo ${{ github.repository_owner }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags:  ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.head_ref || github.ref_name }}


  deploy:
    runs-on: ubuntu-latest
    needs: build-push
    env:
      INFRA_DIR: ${{ vars.INFRA_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
          echo "${{ secrets.SSH_KEY }}" >> ~/.ssh/deploy.key
          chmod 0600 ~/.ssh/deploy.key
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Pull image for service
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/deploy.key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<EOF
            cd $INFRA_DIR
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ secrets.GCR_USERNAME }} --password-stdin
            docker compose pull dfb-django
          EOF

      - name: Restart service
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/deploy.key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<EOF
            cd $INFRA_DIR
            docker compose down --remove-orphans dfb-django
            docker compose up dfb-django -d --force-recreate
            docker compose restart nginx-staging
          EOF
